#include <stdio.h>
#include <string.h>
#include <stdlib.h>

void xor_obfuscate(char *data, char key) {
    for (int i = 0; i < strlen(data); i++) {
        data[i] ^= key;
    }
}

char *base64_decode(const char *data, size_t *out_len);
int main() {
    char obfuscated[50];
    char key = 5; // XOR key
    strcpy(obfuscated, "J1lnVG9GVnRCMmxsWVNJMk1qRkZUa0ZoU1QwPQ==");
    printf("Can you reveal the hidden message?\n");
    xor_obfuscate(obfuscated, key);
    size_t out_len;
    char *decodedString = base64_decode(obfuscated, &out_len);
    if (decodedString) {
        printf("Decoded message: %s\n", decodedString);
        free(decodedString);
    } else {
        printf("Decoding failed.\n");
    }

    return 0;
}

char *base64_decode(const char *data, size_t *out_len) {
    const char base64_table[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    int len = strlen(data);
    char *decoded = malloc((len * 3) / 4 + 1);
    int bits = 0, value = 0, i, j = 0;

    if (!decoded) return NULL; // Memory allocation check

    for (i = 0; i < len; i++) {
        if (data[i] == '=') break;
        const char *pos = strchr(base64_table, data[i]);
        if (!pos) continue; // Ignore invalid characters
        
        value = (value << 6) + (pos - base64_table);
        bits += 6;

        if (bits >= 8) {
            decoded[j++] = (value >> (bits - 8)) & 0xFF;
            bits -= 8;
        }
    }

    decoded[j] = '\0';
    *out_len = j;
    return decoded;
}
